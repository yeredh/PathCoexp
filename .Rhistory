?prcomp
prcomp(L,center = TRUE)
prcomp(L,center = F)
prcomp(L,center = F,scale.=F)
eigen(L)
prcomp(L,center = F,scale.=F)
eigen(L)
L.pca=prcomp(L,center = F,scale.=F)
L.pca$center
L.pca$rotation
L.pca$rotation[,7]
L.pca$rotation[,6]
which(L.pca$rotation[,6]>0)
node.col <- rep(NA,7)
node.col <- rep(NA,7)
node.col[which(L.pca$rotation[,6]<0)] <- "red"
node.col[which(L.pca$rotation[,6]>0)] <- "green"
V(G)$color <- node.col
plot(G)
# ===== Chapter 2 ====
library(igraph)
# ===== 2.3 =====
# adjacency matrix
A <- matrix(NA,ncol=7,nrow=7)
A[lower.tri(A,diag=T)] <- c(0,1,1,0,0,0,0,
0,1,1,0,0,0,
0,0,1,0,0,
0,1,1,1,
0,1,0,
0,1,
0)
A[upper.tri(A)] <- t(A[lower.tri(A)])
# create graph
G=graph.adjacency(Matrix(A),mode="lower")
plot(G)
# get Laplacian
D=diag(c(A%*%rep(1,7)))
L=D-A
# get eigenvalues and eigenvectors
eigen(L)
L.pca=prcomp(L,center = F,scale.=F)
# partition graph based on second eigenvector from Laplacian
node.col <- rep(NA,7)
node.col[which(L.pca$rotation[,6]<0)] <- "red"
node.col[which(L.pca$rotation[,6]>0)] <- "green"
V(G)$color <- node.col
plot(G)
read.table("C:/Users/Yered/Copy/SAND/Table_2.1",header=T)
read.table("C:/Users/Yered/Copy/SAND/Table_2.1.txt",header=T)
data <- read.table("C:/Users/Yered/Copy/SAND/Table_2.1.txt",header=T)
dataSet <- read.table("C:/Users/Yered/Copy/SAND/Table_2.1.txt",header=T)
data.set <- read.table("C:/Users/Yered/Copy/SAND/Table_2.1.txt",header=T)
fit00 <- lm(Y~X1+X2,data=data.set)
fit00
summary(fit00)
fit01 <- lm(Y~X1+X2+X3,data=data.set)
summary(fit01)
library(MASS)
?lm.ridge
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=1)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=2)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=5)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=10)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=1)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=5)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=10)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=15)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=20)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=5)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=10)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=20)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=50)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=500)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=50)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=15)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=11)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=10)
install.packages("parcor")
library(parcor)
subset(data.set,select-c(X1,X2,X3))
subset(data.set,select=c(X1,X2,X3))
ridge.object <- ridge.cv(subset(data.set,select=c(X1,X2,X3)),data.set$Y)
subset(data.set,select=c(X1,X2,X3))
class(subset(data.set,select=c(X1,X2,X3)))
as.matrix(subset(data.set,select=c(X1,X2,X3)))
ridge.object <- ridge.cv(as.matrix(subset(data.set,select=c(X1,X2,X3))),data.set$Y)
ridge.object
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=1)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=5)
data.set$X2
data.set$X3
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=5)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=6)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=1)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=2)
?ridge.cv
ridge.object <- ridge.cv(as.matrix(subset(data.set,select=c(X1,X2,X3))),data.set$Y.scale=F)
ridge.object <- ridge.cv(as.matrix(subset(data.set,select=c(X1,X2,X3))),data.set$Y,scale=F)
ridge.object
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=1)
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=5)
tmp=lm.ridge(Y~X1+X2+X3,data=data.set,lambda=5)
tmp
lambda.vec <- seq(1,20)
lambda.vec
lambda.vec <- seq(1,20)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
lambda.vec <- seq(1,20)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- lm.ridge(Y~X1+X2+X3,data=data.set,lambda==lambda.vec[i])
i = i+1
}
lambda.vec <- seq(1,20)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i])
i = i+1
}
lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i])
class(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
c(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
coef(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=1))
lambda.vec <- seq(1,20)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- coef(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
i = i+1
}
ridge.coef
ridge.coef[20,]
x=ridge.coef[20,]
x-c(1,1,1,0)
(x-c(1,1,1,0))^2
sum((x-c(1,1,1,0))^2)
apply(ridge.coef,1,function(x){sum((x-c(1,1,1,0))^2)})
lambda.vec <- seq(1,50)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- coef(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
i = i+1
}
apply(ridge.coef,1,function(x){sum((x-c(1,1,1,0))^2)})
true.diff <- apply(ridge.coef,1,function(x){sum((x-c(1,1,1,0))^2)})
plot(true.diff)
plot(true.diff,type="l")
abline(v-min(true.diff),col="red")
abline(v=min(true.diff),col="red")
abline(v=which.min(true.diff),col="red")
plot(true.diff,type="l")
abline(v=which.min(true.diff),col="red")
which.min(true.diff)
true.diff[19:21]
lambda.vec <- seq(19,20,length.out=100)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- coef(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
i = i+1
}
true.diff <- apply(ridge.coef,1,function(x){sum((x-c(1,1,1,0))^2)})
plot(true.diff,type="l")
plot(lambda.vec,true.diff,type="l")
lambda.vec <- seq(19,21,length.out=100)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- coef(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
i = i+1
}
true.diff <- apply(ridge.coef,1,function(x){sum((x-c(1,1,1,0))^2)})
plot(lambda.vec,true.diff,type="l")
which.min(true.diff)
abline(v=lambda.vec[which.min(true.diff)],col="red")
lambda.vec[which.min(true.diff)]
ridge.coef[which.min(true.diff),]
lambda.vec <- seq(1,50)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- coef(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
i = i+1
}
true.diff <- apply(ridge.coef,1,function(x){sum((x-c(1,1,1,0))^2)})
plot(true.diff,type="l")
abline(v=which.min(true.diff),col="red")
lambda.vec <- seq(50,100)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- coef(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
i = i+1
}
true.diff <- apply(ridge.coef,1,function(x){sum((x-c(1,1,1,0))^2)})
plot(true.diff,type="l")
abline(v=which.min(true.diff),col="red")
lambda.vec <- seq(1,50)
ridge.coef <- matrix(NA,ncol=4,nrow=length(lambda.vec))
i=1
while(i <= length(lambda.vec)){
ridge.coef[i,] <- coef(lm.ridge(Y~X1+X2+X3,data=data.set,lambda=lambda.vec[i]))
i = i+1
}
true.diff <- apply(ridge.coef,1,function(x){sum((x-c(1,1,1,0))^2)})
plot(true.diff,type="l")
abline(v=which.min(true.diff),col="red")
# ===== Chapter 2 ====
library(igraph)
# ===== 2.3 =====
# adjacency matrix
A <- matrix(NA,ncol=7,nrow=7)
A[lower.tri(A,diag=T)] <- c(0,1,1,0,0,0,0,
0,1,1,0,0,0,
0,0,1,0,0,
0,1,1,1,
0,1,0,
0,1,
0)
A[upper.tri(A)] <- t(A[lower.tri(A)])
# create graph
G=graph.adjacency(Matrix(A),mode="lower")
plot(G)
G=graph.adjacency(matrix(A),mode="lower")
library(Matrix)
# ===== 2.3 =====
# adjacency matrix
A <- matrix(NA,ncol=7,nrow=7)
A[lower.tri(A,diag=T)] <- c(0,1,1,0,0,0,0,
0,1,1,0,0,0,
0,0,1,0,0,
0,1,1,1,
0,1,0,
0,1,
0)
A[upper.tri(A)] <- t(A[lower.tri(A)])
# create graph
G=graph.adjacency(Matrix(A),mode="lower")
plot(G)
assortativity.degree(H,F)
assortativity.degree(G,FALSE)
?assortativity
patchCor.dframe <- readRDS("Hide Lab/MedianNet/output/pathCor.dframe.RDS")
pathCor.dframe <- readRDS("Hide Lab/MedianNet/output/pathCor.dframe.RDS")
View(patchCor.dframe)
rm(list=ls())
pathCor.dframe <- readRDS("Hide Lab/MedianNet/output/pathCor.dframe.RDS")
pathCor.dframe <- readRDS("Hide Lab/MedianNet/output/pathCor.dframe.RDS")
D.BIC.cutoff <- 10
cor.cutoff <- 0.25
length(which(pathCor.dframe$D.BIC >= D.BIC.cutoff))
length(which(pathCor.dframe$D.BIC >= D.BIC.cutoff))/length(pathCor.dframe$D.BIC)
hist(pathCor.dframe$PathCor)
D.BIC.cut <- 10
cor.cut <- 0.25
tmp00 = union(which(pathCor.dframe$D.BIC > D.BIC.cut),
which(abs(pathCor.dframe$PathCor) > cor.cut))
tmp01 = unique(c(which(pathCor.dframe$D.BIC > D.BIC.cut),
which(abs(pathCor.dframe$PathCor) > cor.cut)))
unique(sort(tmp00),sort(tmp01))
identical(sort(tmp00),sort(tmp01))
# helper function to apply D.BIC and correlation cut-offs
applyCutOffs <- function(path.dframe,D.BIC.cut,cor.cut){
ind <-  union(which(pathCor.dframe$D.BIC > D.BIC.cut),
which(abs(pathCor.dframe$PathCor) > cor.cut))
return(path.dframe[ind,])
}
applyCutOffs(path.dframe=pathCor.dframe,
D.BIC.cut=10,cor.cut=0.25)
tmp.dframe <- applyCutOffs(path.dframe=pathCor.dframe,
D.BIC.cut=10,cor.cut=0.25)
hist(tmp.dframe$PathCor)
library(igraph)
?graph.data.frame
G <- graph.data.frame(tmp.dframe,directed=F)
no.clusters(G)
quantile(pathCor.dframe$D.BIC,0.05)
?quantile
quantile(pathCor.dframe$D.BIC,0.05,na.rm=T)
seq(0,1,0.05)
quant.vec <- seq(0,1,0.05)
i=1
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.vec[i],na.rm=T)
D.BIC.cut
cor.seq <- seq(0,1,0.25)
seq(0,1,0.25)
seq(0,1,0.05)
quant.seq <- seq(0,1,0.05)
cor.seq <- seq(0,1,0.05)
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.seq[i],na.rm=T)
i=1
j=1
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.seq[i],na.rm=T)
cor.cut <- cor.seq[j]
tmp.dframe <- applyCutOffs(path.dframe=pathCor.dframe,D.BIC.cut,cor.cut)
G <- graph.data.frame(tmp.dframe,directed=F)
no.clusters(G)
no.components <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
no.components <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
quant.seq <- seq(0,1,0.05)
cor.seq <- seq(0,1,0.05)
no.components <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
i=1;j=1;
while(i <= length(cor.seq)){
# get correlation cut-off
cor.cut <- cor.seq[i]
while(j <= length(quant.seq)){
# get D.BIC cut-off
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.seq[j],na.rm=T)
# build network
tmp.dframe <- applyCutOffs(path.dframe=pathCor.dframe,D.BIC.cut,cor.cut)
G <- graph.data.frame(tmp.dframe,directed=F)
no.components[i,j] <- no.clusters(G)
j <- j + 1
}
i <- i + 1
}
no.components
i=1
while(i <= length(cor.seq)){
# get correlation cut-off
cor.cut <- cor.seq[i]
j=1
while(j <= length(quant.seq)){
# get D.BIC cut-off
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.seq[j],na.rm=T)
# build network
tmp.dframe <- applyCutOffs(path.dframe=pathCor.dframe,D.BIC.cut,cor.cut)
G <- graph.data.frame(tmp.dframe,directed=F)
no.components[i,j] <- no.clusters(G)
j <- j + 1
}
i <- i + 1
}
no.components
no.components
paste("cor",cor.seq)
paste("cor",cor.seq.sep="_")
paste("cor",cor.seq,sep="_")
paste("BIC",quant.seq,sep="_")
rownames(no.components) <- paste("cor",cor.seq,sep="_")
colnames(no.components) <- paste("BIC",quant.seq,sep="_")
no.components
no.components
G
i=1
cor.cut <- cor.seq[i]
j=1
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.seq[j],na.rm=T)
# build network
tmp.dframe <- applyCutOffs(path.dframe=pathCor.dframe,D.BIC.cut,cor.cut)
G <- graph.data.frame(tmp.dframe,directed=F)
no.clusters(G)
V(G)
length(V(G))
N.edges <- choose(633,2)
length(E(G))
no.components <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.components) <- paste("cor",cor.seq,sep="_")
colnames(no.components) <- paste("BIC",quant.seq,sep="_")
no.vertices <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.vertices) <- paste("cor",cor.seq,sep="_")
colnames(no.vertices) <- paste("BIC",quant.seq,sep="_")
no.edges <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.edges) <- paste("cor",cor.seq,sep="_")
colnames(no.edges) <- paste("BIC",quant.seq,sep="_")
N.edges <- choose(633,2)
i=1
while(i <= length(cor.seq)){
# get correlation cut-off
cor.cut <- cor.seq[i]
j=1
while(j <= length(quant.seq)){
# get D.BIC cut-off
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.seq[j],na.rm=T)
# build network
tmp.dframe <- applyCutOffs(path.dframe=pathCor.dframe,D.BIC.cut,cor.cut)
G <- graph.data.frame(tmp.dframe,directed=F)
no.components[i,j] <- no.clusters(G)
no.vertices[i,j] <- length(V(G))
no.edges[i,j] <- length(E(G))
j <- j + 1
}
i <- i + 1
}
no.components
no.vertices
no.edges/N.edges
round(no.edges/N.edges,4)
applyCutOffs <- function(path.dframe,D.BIC.cut,cor.cut){
ind <-  union(which(path.dframe$D.BIC > D.BIC.cut),
which(abs(path.dframe$PathCor) > cor.cut))
return(path.dframe[ind,])
}
which(abs(pathCor.dframe$PathCor) > cor.cut[1])
which(abs(pathCor.dframe$PathCor) > 1)
cor.seq
applyCutOffs <- function(path.dframe,D.BIC.cut,cor.cut){
ind <-  union(which(path.dframe$D.BIC > D.BIC.cut),
which(abs(path.dframe$PathCor) > cor.cut))
return(path.dframe[ind,])
}
applyCutOffs(pathCor.dframe,D.BIC.cut=10,cor.cut=1)
applyCutOffs <- function(path.dframe,D.BIC.cut,cor.cut){
ind <-  intersect(which(path.dframe$D.BIC > D.BIC.cut),
which(abs(path.dframe$PathCor) > cor.cut))
return(path.dframe[ind,])
}
applyCutOffs(pathCor.dframe,D.BIC.cut=10,cor.cut=1)
# helper function to apply D.BIC and correlation cut-offs
applyCutOffs <- function(path.dframe,D.BIC.cut,cor.cut){
ind <-  intersect(which(path.dframe$D.BIC > D.BIC.cut),
which(abs(path.dframe$PathCor) > cor.cut))
return(path.dframe[ind,])
}
quant.seq <- seq(0,1,0.05)
cor.seq <- seq(0,1,0.05)
no.components <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.components) <- paste("cor",cor.seq,sep="_")
colnames(no.components) <- paste("BIC",quant.seq,sep="_")
no.vertices <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.vertices) <- paste("cor",cor.seq,sep="_")
colnames(no.vertices) <- paste("BIC",quant.seq,sep="_")
no.edges <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.edges) <- paste("cor",cor.seq,sep="_")
colnames(no.edges) <- paste("BIC",quant.seq,sep="_")
N.edges <- choose(633,2)
i=1
while(i <= length(cor.seq)){
# get correlation cut-off
cor.cut <- cor.seq[i]
j=1
while(j <= length(quant.seq)){
# get D.BIC cut-off
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.seq[j],na.rm=T)
# build network
tmp.dframe <- applyCutOffs(path.dframe=pathCor.dframe,D.BIC.cut,cor.cut)
G <- graph.data.frame(tmp.dframe,directed=F)
no.components[i,j] <- no.clusters(G)
no.vertices[i,j] <- length(V(G))
no.edges[i,j] <- length(E(G))
j <- j + 1
}
i <- i + 1
}
no.components
no.vertices
round(no.edges/N.edges,3)
no.vertices >= 600
no.vertices >= 600 * no.components == 1
(no.vertices >= 600) * no.components == 1
(no.vertices >= 600) * (no.components == 1)
(no.vertices >= 600) * (no.components == 1) * (no.edges/N.edges < 0.5)
library(igraph)
pathCor.dframe <- readRDS("Hide Lab/MedianNet/output/pathCor.dframe.RDS")
D.BIC.cut <- 10
cor.cut <- 0.25
# Histogram of correlations
hist(pathCor.dframe$PathCor)
# helper function to apply D.BIC and correlation cut-offs
applyCutOffs <- function(path.dframe,D.BIC.cut,cor.cut){
ind <-  intersect(which(path.dframe$D.BIC > D.BIC.cut),
which(abs(path.dframe$PathCor) > cor.cut))
return(path.dframe[ind,])
}
quant.seq <- seq(0,1,0.05)
cor.seq <- seq(0,1,0.05)
no.components <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.components) <- paste("cor",cor.seq,sep="_")
colnames(no.components) <- paste("BIC",quant.seq,sep="_")
no.vertices <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.vertices) <- paste("cor",cor.seq,sep="_")
colnames(no.vertices) <- paste("BIC",quant.seq,sep="_")
no.edges <- matrix(NA,nrow=length(cor.seq),ncol=length(quant.seq))
rownames(no.edges) <- paste("cor",cor.seq,sep="_")
colnames(no.edges) <- paste("BIC",quant.seq,sep="_")
N.edges <- choose(633,2)
i=1
while(i <= length(cor.seq)){
# get correlation cut-off
cor.cut <- cor.seq[i]
j=1
while(j <= length(quant.seq)){
# get D.BIC cut-off
D.BIC.cut <- quantile(pathCor.dframe$D.BIC,quant.seq[j],na.rm=T)
# build network
tmp.dframe <- applyCutOffs(path.dframe=pathCor.dframe,D.BIC.cut,cor.cut)
G <- graph.data.frame(tmp.dframe,directed=F)
no.components[i,j] <- no.clusters(G)
no.vertices[i,j] <- length(V(G))
no.edges[i,j] <- length(E(G))
j <- j + 1
}
i <- i + 1
}
no.components
no.vertices
round(no.edges/N.edges,3)
(no.vertices >= 620) * (no.components == 1) * (no.edges/N.edges < 0.5)
(no.vertices >= 620) * (no.components == 1) * (no.edges/N.edges < 0.1)
(no.vertices >= 600) * (no.components == 1) * (no.edges/N.edges < 0.1)
(no.vertices >= 600) * (no.components == 1) * (no.edges/N.edges < 0.2)
no.components
no.vertices
round(no.edges/N.edges,3)
quantile(pathCor.dframe$D.BIC,0.85,na.rm=T)
library(shiny)
setwd("C:/Users/Yered/Copy/Shiny/PathCoexp04")
runApp()
